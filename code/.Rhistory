theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -45))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank())->
WP
WP
Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -30))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank())->
WP
WP
Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -20))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank())->
WP
WP
Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -30))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank())->
WP
WP
VariableComparison <- (AllPIVar + AllCat + WP)
VariableComparison
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank())->
WP
VariableComparison <- (AllPIVar + AllCat + WP)
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
WP <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank(), title = "C."))
WP <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank(), title = "C.")
WP
#plot by variable weight
Variable %>%
ggplot(aes(fill=Type, x=J, y=ByWeight))+
geom_bar(position = "stack", stat = "identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 1)))+
#plot by variable weight
Variable %>%
ggplot(aes(fill=Type, x=J, y=ByWeight))+
geom_bar(position = "stack", stat = "identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 1))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_fill_manual(values = c("grey45", "grey69"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Unique Variable Weight", x=element_blank(), fill=element_blank())->
V1P
V1P
WP <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -90),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank(), title = "C.")
WP
WP <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
axis.text.x = element_text(angle = -10),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank(), title = "C.")
VariableComparison
VariableComparison <- (AllPIVar + AllCat + WP)
VariableComparison
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
WP <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, x=Jurisdiction, y=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = -20),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_x_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_y_continuous(expand = c(0,0))+
labs(y="% Scoring Weight", x=element_blank(), fill=element_blank(), title = "C.")
VariableComparison <- (AllPIVar + AllCat + WP)
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
#Flipped x and y axis version
WPFlipped <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, y=Jurisdiction, x=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_y_discrete(expand = c(0,0),
limits=c("Chehalis","CWCC", "Bellingham", "Thurston", "King"))+
scale_x_continuous(expand = c(0,0))+
labs(x="% Scoring Weight", y=element_blank(), fill=element_blank(), title = "C.")
WPFlipped
VariableComparison <- (AllPIVar + AllCat + WPFlipped)
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
#Flipped x and y axis version
WPFlipped <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, y=Jurisdiction, x=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_y_discrete(expand = c(0,0),
limits=c("Thurston", "Bellingham", "King", "CWCC", "Chehalis"))+
scale_x_continuous(expand = c(0,0))+
labs(x="% Scoring Weight", y=element_blank(), fill=element_blank(), title = "C.")
WPFlipped
#Flipped x and y axis version
WPFlipped <- Weight %>%
filter(Jurisdiction!= "CWCCReport") %>%
ggplot(aes(fill=BroadCat, y=Jurisdiction, x=Weight*100))+
geom_bar(position="stack", stat="identity")+
theme_classic()+
theme(axis.ticks = element_blank(),
plot.title = element_text(face = "bold", hjust = 1))+
scale_fill_manual(values=saturation(pal, delta(-0.2)))+
scale_y_discrete(expand = c(0,0),
limits=c("Chehalis", "CWCC", "King", "Bellingham", "Thurston"))+
scale_x_continuous(expand = c(0,0))+
labs(x="% Scoring Weight", y=element_blank(), fill=element_blank(), title = "C.")
WPFlipped
VariableComparison <- (AllPIVar + AllCat + WPFlipped)
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
#This work below was done by Catalina on May 23
#Plot by variable number
AllPIVar <- Variable %>%
ggplot(aes(y=reorder(J2, desc(percentshared)), x=percentshared))+
geom_bar(stat = "identity", na.rm = T)+
theme_classic()+
theme(axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 1))+
scale_y_discrete(expand = c(0,0),
na.translate = F)+
scale_x_continuous(expand = c(0,0),
limits = c(0, 101))+
labs(x="% Shared Metrics", y=element_blank(), title = "A.")
AllCat <- Variable %>%
ggplot(aes(y=reorder(category_2, desc(percent_shared)), x=percent_shared))+
geom_bar(stat = "identity", na.rm = T)+
theme_classic()+
theme(axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 1))+
scale_y_discrete(expand = c(0,0),
na.translate = F)+
scale_x_continuous(expand = c(0,0),
limits = c(0,101))+
labs(x="% Shared Metrics", y=element_blank(), title = "B.")
VariableComparison <- (AllPIVar + AllCat + WPFlipped)
ggsave("VariableComparison.tiff", plot = VariableComparison, path = here("output/VariableComparisonFigs"), device = agg_tiff, width = 10, height = 3)
#-----------Load Libraries
library(sf)
library(spData)
library(tidyverse)
library(here)
library(janitor)
library(patchwork)
library(readxl)
#----------Inset Plot
#'#Load Data
#Counties Data
counties <- read_sf(here("data", "cb_2018_us_county_5m", "cb_2018_us_county_5m.shp"))
counties = counties %>%
filter(STATEFP == "53") %>%
mutate(GEOID = as.numeric(GEOID)) %>%
rename(COUNTY = GEOID)
# Case area borders
sf_case <- st_read(here("data/WSDOT_-_Fish_Passage_US_v._WA_Case_Area_Boundary-shp/WSDOT_-_Fish_Passage_US_v._WA_Case_Area_Boundary.shp"), quiet = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Prepare environment ----
rm(list = ls())
# Load libraries
library(sf)
library(maps)
library(ggmap)
library(raster)
library(tidyverse)
library(here)
library(janitor)
library(tmap)
library(nhdplusTools)
library(patchwork)
library(DT)
library(dplyr)
library(tidyverse)
library(readxl)
library(ggplot2)
library(ineq)
library(classInt)
# ____ WDFW inventory ----
if(!file.exists(here("data/culv_inventories/WdfwFishPassage.zip"))){
download.file(
"https://fortress.wa.gov/dfw/public/PublicDownload/habitat/FishPassage/WdfwFishPassage.zip",
here("data/culv_inventories/WdfwFishPassage.zip")
)
unzip(
here("data/culv_inventories/WdfwFishPassage.zip"),
exdir = here("data/culv_inventories/WdfwFishPassage")
)
}
st_layers(here("data/culv_inventories/WdfwFishPassage/WdfwFishPassage.gdb"))
sf_allculv_wdfw <- st_read(here("data/culv_inventories/WdfwFishPassage/WdfwFishPassage.gdb"), layer = "WDFW_FishPassageSite")
# Check projection
st_crs(sf_allculv_wdfw)
# Check variable names
names(sf_allculv_wdfw)
# Repair names
sf_allculv_wdfw <- sf_allculv_wdfw %>% clean_names()
names(sf_allculv_wdfw)
# Lots of variables look like they're codes, will need to find codebook
# Currently building custom codebook using https://geodataservices.wdfw.wa.gov/hp/fishpassage/index.html
# Check some key variables
sf_allculv_wdfw %>% tabyl(feature_type)
# Lots of culverts! Over 35k!
summary(sf_allculv_wdfw$lineal_gain_measurement)
# Big distribution of lineal gain, though unclear how this is calculated; appears to be in meters
sf_allculv_wdfw %>% filter(str_detect(feature_type, "Culvert")) %>% tabyl(fish_passage_feature_type_code) # Codes needed (1 = culvert, 2 = non-culvert xing, 3 = dam, 4 = other, 5 = natural barrier)
sf_allculv_wdfw %>% filter(str_detect(feature_type, "Culvert")) %>% tabyl(fish_passage_barrier_status_code) # Codes needed (0 = NA, 10 = Barrier, 20 = Not a barrier, 99 = Unknown)
sf_allculv_wdfw %>% tabyl(percent_fish_passable_code) # Codes needed (0 = NA, 10 = 0, 20 = 33, 30 = 66, 40 = 100, 99 = Unknown)
sf_allculv_wdfw %>% tabyl(owner_type_code) # Codes needed (1 = "city", 2 = "county", 3 = "federal", 4 = "private", 5 = "state", 6 = "tribal", 7 = "other", 8 = "port", 9 = "drainage district, 11 = "irrigation district", 12 = "unknown")
#sf_allculv_wdfw %>% tabyl(potential_species) # Presented as list of potential species, will need to be separated with stringr tools
#sf_allculv_wdfw %>% tabyl(fish_use_code) # Codes needed (0 = NA, 10 = Yes, 20 = No, 99 = Unknown)
#sf_allculv_wdfw %>% tabyl(significant_reach_code) # Codes needed (0 = NA, 10 = Yes, 20 = No, 99 = Unknown)
#sf_allculv_wdfw %>% tabyl(case_area_flag) # No values
# Lots of codes, will probably need to request a code book from WDFW
# Case area borders
sf_case <- st_read(here("data/WSDOT_-_Fish_Passage_US_v._WA_Case_Area_Boundary-shp/WSDOT_-_Fish_Passage_US_v._WA_Case_Area_Boundary.shp"), quiet = TRUE)
# Must set CRS as well as save for spatial clipping
sf_case <- st_transform(sf_case, crs = 4326)
sf_allculv_wdfw <- st_transform(sf_allculv_wdfw, crs = 4326)
# Clip culvert dataset by case area
sf_case_culverts <- sf_allculv_wdfw[sf_case, ]
sf_case_culverts = sf_case_culverts %>%
filter(grepl('Culvert', feature_type)) %>%
filter(!grepl('Non', feature_type)) ### Change to Contains culters
# Decode coded section based on cross reference
sf_case_culverts = sf_case_culverts %>%
mutate(fish_passage_barrier_status_code = as.factor(case_when(
fish_passage_barrier_status_code == 0 ~ "NA",
fish_passage_barrier_status_code == 10 ~ "barrier",
fish_passage_barrier_status_code == 20 ~ "non-barrier",
fish_passage_barrier_status_code == 99 ~ "unknown"
))) %>%
mutate(percent_fish_passable_code = as.factor(case_when(
percent_fish_passable_code == 0 ~ "NA",
percent_fish_passable_code == 10 ~ "0",
percent_fish_passable_code == 20 ~ "33",
percent_fish_passable_code == 30 ~ "66",
percent_fish_passable_code == 40 ~ "100",
percent_fish_passable_code == 99 ~ "unkown"
))) %>%
mutate(owner_type_code = as.factor(case_when(
owner_type_code == 1 ~ "city",
owner_type_code == 2 ~ "county",
owner_type_code == 3 ~ "federal",
owner_type_code == 4 ~ "private",
owner_type_code == 5 ~ "state",
owner_type_code == 6 ~ "tribal",
owner_type_code == 7 ~ "other",
owner_type_code == 8 ~ "port",
owner_type_code == 9 ~ "drainage district",
owner_type_code == 11 ~ "irrigation district",
owner_type_code == 12 ~ "unknown"
))) %>%
mutate(fish_use_code = as.factor(case_when(
fish_use_code == 0 ~ "NA", #Think we should keep NAs?
fish_use_code == 10 ~ "yes",
fish_use_code == 20 ~ "no",
fish_use_code == 99 ~ "unknown"
))) %>%
mutate(significant_reach_code = as.factor(case_when(
significant_reach_code == 0 ~ "NA",
significant_reach_code == 10 ~ "yes",
significant_reach_code == 20 ~ "no",
significant_reach_code == 99 ~ "unknown"
)))
# Filter out non barrier culverts
sf_case_culverts = sf_case_culverts %>%
filter(percent_fish_passable_code != "100") %>%
filter(fish_use_code != "no") %>%
filter(fish_passage_barrier_status_code != "non-barrier")
# How many barrier culverts in the injunction area?
nrow(sf_case_culverts)
# What are the remaining feature types?
print(unique(sf_case_culverts$feature_type))
# What are the remaining fish passable codes?
print(unique(sf_case_culverts$percent_fish_passable_code))
# Create map of injunction area over counties
counties <- read_sf(here("data", "cb_2018_us_county_5m", "cb_2018_us_county_5m.shp"))
counties = counties %>%
filter(STATEFP == "53") %>%
mutate(GEOID = as.numeric(GEOID)) %>%
rename(COUNTY = GEOID)
wa.plot <- ggplot() +
geom_sf(data = counties) +
geom_sf(data = sf_case,
aes(color = "red", alpha = 0.5)) +
labs(title = "Injunction area overlayed on counties") +
theme_void()
wa.plot
# Find percent passable counts at county level
count_passability = sf_case_culverts %>%
group_by(county_name, percent_fish_passable_code) %>%
mutate(count_passable = n()) %>%
dplyr::select(county_name, percent_fish_passable_code, count_passable) %>%
st_drop_geometry() %>%
unique()
count_passability$percent_fish_passable_code <- as.factor(count_passability$percent_fish_passable_code)
# Graph percent passable counts at county level
ggplot(count_passability, aes(fill = percent_fish_passable_code,
y = count_passable, x = reorder(county_name, count_passable))) +
geom_bar(position="stack", stat="identity") +
xlab("") +
ylab("Fish Barrier Culvert Count") +
guides(fill=guide_legend(title= "Percent Passable")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# How many barrier culverts in the injunction area?
nrow(sf_case_culverts)
# Create map of injunction area over counties
counties <- read_sf(here("data", "cb_2018_us_county_5m", "cb_2018_us_county_5m.shp"))
counties = counties %>%
filter(STATEFP == "53") %>%
mutate(GEOID = as.numeric(GEOID)) %>%
rename(COUNTY = GEOID)
wa.plot <- ggplot() +
geom_sf(data = counties) +
geom_sf(data = sf_case,
aes(color = "red", alpha = 0.5)) +
labs(title = "Injunction area overlayed on counties") +
theme_void()
wa.plot
# How many barrier culverts in the injunction area?
nrow(sf_case_culverts)
# Libraries
library(here)
library(tidyverse)
library(sf)
library(nhdplusTools)
## Load NHDPlus HR ----
hucs <- c(1710, 1711)
if(!file.exists(here("data", "NHDPlusHR", "17"))){
# Try getting the HR version
message("NHDPlus HR missing. Now attempting download.")
download_nhdplushr(
nhd_dir = here("data", "NHDPlusHR"),
hu_list = hucs # Can download additional HU at 2 or 4 level but these are really big detailed files!
)
} else {
message("NHDPlus HR installed. Loading existing data.")
}
# Load NHDPlus HR data
hr_data <-
get_nhdplushr(
here("data", "NHDPlusHR/"),
# Include core flowline data, catchment data, and WDB HUC boundaries
layers = c("WBDHU6", "WBDHU8", "WBDHU10", "WDBHUC12")
)
## Load NHDPlus HR ----
hucs <- c(1710, 1711)
if(!file.exists(here("data", "NHDPlusHR", "17"))){
# Try getting the HR version
message("NHDPlus HR missing. Now attempting download.")
download_nhdplushr(
nhd_dir = here("data", "NHDPlusHR"),
hu_list = hucs # Can download additional HU at 2 or 4 level but these are really big detailed files!
)
} else {
message("NHDPlus HR installed. Loading existing data.")
}
# Load NHDPlus HR data
hr_data <-
get_nhdplushr(
here("data", "NHDPlusHR/"),
# Include core flowline data, catchment data, and WDB HUC boundaries
layers = c("WBDHU6", "WBDHU8", "WBDHU10", "WDBHUC12")
)
ggplot(
hr_data$WBDHU8 %>%
filter(Name %in% c("Upper Skagit", "Lower Skagit", "Sauk", "Strait of Georgia"))
) +
geom_sf() +
geom_sf(
color = "red",
data = hr_data$WBDHU10 %>% filter(str_starts(as.character(HUC10), "17110002"))
) +
geom_sf_text(
aes(label = Name),
data = hr_data$WBDHU10 %>% filter(str_starts(as.character(HUC10), "17110002"))
)
# Load NHDPlus HR data
hr_data <-
get_nhdplushr(
here("data", "NHDPlusHR/"),
# Include core flowline data, catchment data, and WDB HUC boundaries
layers = c("WBDHU6", "WBDHU8", "WBDHU10", "WDBHUC12")
)
ggplot(
hr_data$WBDHU8 %>%
filter(Name %in% c("Upper Skagit", "Lower Skagit", "Sauk"))
) +
geom_sf() +
geom_sf(
color = "red",
data = hr_data$WBDHU10 %>% filter(Name %in% c("Samish River", "Telegraph Slough-Frontal Padilla Bay"))
)
if(!file.exists(here("data", "NHDPlusHR", "17"))){
# Try getting the HR version
message("NHDPlus HR missing. Now attempting download.")
download_nhdplushr(
nhd_dir = here("data", "NHDPlusHR"),
hu_list = hucs # Can download additional HU at 2 or 4 level but these are really big detailed files!
)
} else {
message("NHDPlus HR installed. Loading existing data.")
}
## Load NHDPlus HR ----
hucs <- c(1710, 1711)
# Load NHDPlus HR data
hr_data <-
get_nhdplushr(
here("data", "NHDPlusHR/"),
# Include core flowline data, catchment data, and WDB HUC boundaries
layers = c("WBDHU6", "WBDHU8", "WBDHU10", "WDBHUC12")
)
